# -*- coding: utf-8 -*-
"""LVADSUSR158_Jeno_Logistic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IfRm_c7P5SJ7Kzt2BOihT_prLhpPcKHH
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder,MinMaxScaler
from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score,confusion_matrix,classification_report

df=pd.read_csv("/content/booking.csv")
df

df.info()

df.describe()

df.shape

df.dtypes

df.isna().sum()

plt.figure(figsize=(12,6))
sns.histplot(df['average price'])
plt.title("Histogram of Average Price")

df['average price']=df['average price'].fillna(df['average price'].median())

plt.figure(figsize=(12,6))
df['room type'].value_counts().plot(kind='bar')
plt.title("Bar plot of Room Type")

df['room type']=df['room type'].fillna(df['room type'].mode()[0])

df.isna().sum()

df=df.drop(columns=['Booking_ID'])

df

col=['type of meal','room type','market segment type','date of reservation','booking status']
for c in col:
  l=LabelEncoder()
  df[c]=l.fit_transform(df[c])
df

for column in df.select_dtypes(include=['float64','int64']).columns:

  sns.boxplot(df[column])
  plt.title("Boxplot for outlier detection")

q1=df.quantile(0.25)
q3=df.quantile(0.75)
iqr=q3-q1

outliers=((df< q1-1.5*iqr) | (df> q3+1.5*iqr)).any(axis=1)
cleaned_df=df[~outliers]
cleaned_df

df.corr()

plt.figure(figsize=(20,12))
sns.heatmap(df.corr(),annot=True)

X=df.drop(columns=['booking status'])
y=df['booking status']

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.1,random_state=42)

X_train

scaler=MinMaxScaler()
X_train=scaler.fit_transform(X_train)
X_test=scaler.fit_transform(X_test)

model=LogisticRegression()
model.fit(X_train,y_train)
y_pred=model.predict(X_test)

y_pred[:5]

print("Confusion Matrix: ",confusion_matrix(y_pred,y_test))
print("Classification Report: ",classification_report(y_pred,y_test))

print("Accuracy Score: ",accuracy_score(y_pred,y_test))
print("Recall Score: ",recall_score(y_pred,y_test))
print("Precision Score: ",precision_score(y_pred,y_test))
print("F1 Score: ",f1_score(y_pred,y_test))
print("Coefficient: ",model.coef_)
print("Intercept: ",model.intercept_)